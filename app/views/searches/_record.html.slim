ruby:
  enable_availability = local_assigns.fetch(:enable_availability) { false } &&
                        show_availability?(record, search_scope: current_search_scope)
  enable_watch_lists_panel = local_assigns.fetch(:enable_watch_lists_panel) { false }
  enable_fulltext_links = local_assigns.fetch(:enable_fulltext_links) { false }

.d-flex(
  data-availabilities-target="record"
  data-record-id=record.id
  data-availabilities-enabled=enable_availability
)
  div.align-self-start.text-center.text-muted.me-3(style="width: 55px; min-width: 55px; position: relative")
    / Cover Image
    div.fa-regular.fa-file.fa-3x.bg-light.w-100.p-2.pt-3.pb-3.rounded
    - isbn13 = record.first_isbn13
    - if isbn13
      = image_tag(cover_image_url(isbn13, size: "s"), style: "position: absolute; left:0; top:0", class: "img-fluid rounded")
  div.flex-fill
    div.d-flex
      / Title
      h5.mb-0.me-auto.flex-fill.text-break
        = link_to record.title, show_record_path(record, search_request: @search_request)

      / Watchlist
      - if enable_watch_lists_panel
        ruby:
          watch_lists_panel_component = WatchListsPanelComponent.new(
            user: current_user,
            search_scope: current_search_scope,
            record_id: record.id
          )
        .ms-2 = render(watch_lists_panel_component)

      / Citation / Export
      .ms-2
        .dropdown
          button.btn.btn-outline-primary.btn-sm.dropdown-toggle(type="button" data-bs-toggle="dropdown" aria-expanded="false")
            i.fa-solid.fa-quote-left

          ul.dropdown-menu.dropdown-menu-end
            .px-3.py-1.text-muted.text-sm = t(".citations.header")
            li.dropdown-item ==< link_to t(".citations.bibtex"), record_path(current_search_scope, record.id, format: :bib)

    / Part of...
    = optional_value(record.is_part_of) do |is_part_of|
      ruby:
        links = is_part_of.map do |p|
          if p.id.present?
            sr_to_superorder = SearchEngine::SearchRequest.parse("sr[q,ids]=#{p.id}")
            sr_to_volumes    = SearchEngine::SearchRequest.parse("sr[q,superorder_id]=#{p.id}&sr[s,asc]=volume")

            link_to_superorder = link_to p.label, new_search_request_path(sr_to_superorder)
            link_to_volumes    = link_to t(".all_volumes"), new_search_request_path(sr_to_volumes)

            "#{link_to_superorder} (#{link_to_volumes})"
          else
            p.label
          end
        end
      span.me-2.fst-italic = links.join(", ").html_safe

    / Creators
    - if record.creators.present?
      / TODO: Remove filter after this is handled in normalization
      - creators = record.creators
      - creators = creators.reject{|c| c.relationships.any?{|r| r == "pbl"}}
      .mb-0 = render(CreatorComponent.with_collection(creators))

    / Year of publication
    - if (yop = record.year_of_publication).present?
      .mb-0 = yop

    / Journal stock
    - if record.journal_stocks.present?
      ruby:
        journal_stocks = record.journal_stocks.map do |js|
          [js.label_prefix, js.label].join(" ")
        end
      .mb-0
        = "Zeitschriftenbestand: #{journal_stocks.join("; ")}"

    / Links
    - if enable_fulltext_links
      / Normal fulltext links
      - if record.fulltext_links.present?
        - links       = record.fulltext_links
        - first_link  = links.first
        - other_links = links[1..-1]

        .d-flex.mt-2.bg-light.rounded.p-2.flex-wrap
          .mb-1.me-2
            i.fa-solid.fa-globe
            =< "Link zum Volltext"
          .flex-grow-1(data-controller="expandable-list" data-expandable-list-item-count-value="1")
            ul.list-group(data-expandable-list-target="list")
              - links.each do |link|
                li.list-group-item(data-expandable-list-target="item")
                  div = link_to link.url do
                    i.fa-solid.fa-external-link.fa-fw
                    = link.label

                  - if link.coverage
                    div.text-success: em = link.coverage

                  - if link.note
                    div: em = link.note
              li.list-group-item(data-expandable-list-target="expand")
              li.list-group-item(data-expandable-list-target="collapse")


              /- if other_links.present?
                li.list-group-item(data-expandable-list-target="expand")
                  .mt-1.fw-bold
                    a(href="#expand" data-action="click->expandable-list#expand")
                      = "+"
                      =< pluralize(other_links.count, "weiteren Link anzeigen", "weitere Links anzeigen")
                li.list-group-item(data-expandable-list-target="collapse")
                  .mt-1.fw-bold
                    a(href="#collapse" data-action="click->expandable-list#collapse")
                      = "weniger Links anzeigen"

          / - content_for :vpn_info, vpn_info
          / - if content_for? :vpn_info
          /   .mt-2 = yield(:vpn_info)

          / .input-group-text.bg-transparent.text-wrap.flex-fill(style="text-align: left")
          /   = link_to first_link.url, target: "_blank" do
          /     i.fas.fa-external-link
          /     =< first_link.label

          / - if other_links.present?
          /   button(type="button" class="btn btn-sm btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false")
          /     = "+#{other_links.count}"
          /   ul.dropdown-menu.dropdown-menu-end
          /     - other_links.each do |link|
          /       li: a.dropdown-item(href=link.url target="_blank")
          /         i.fas.fa-external-link
          /         =< link.label
      / resolver links for CDI
      - elsif (rl = record.resolver_link).present? && current_search_scope == :cdi
        .mt-2.input-group.input-group-sm.flex-nowrap
          .input-group-text
            div
              i.fa-solid.fa-globe
              =< "Link zum Volltext"

          .input-group-text.bg-transparent.text-wrap.flex-fill(style="text-align: left")
            turbo-frame#link-resolver-results.w-100
              = link_to rl.url do
                i.fa-solid.fa-clipboard-question
                =< t(".online_resource.resolver_link")

    / Call numbers
    - if record.call_numbers.present?
      div
        = "Signatur:"
        ==< record.call_numbers.map{|cn| link_to(cn, go_item_call_number_info_path)}.join(", ")


    / Availability
    - if enable_availability
      .mt-2(data-availabilities-output)
        i.fas.fa-sm.fa-spinner.fa-pulse
