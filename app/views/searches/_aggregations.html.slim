- if aggregations = search_request.aggregations.presence
  h5 = t(".active_aggregations_header")
  .mb-3
    - aggregations.each do |aggregation|
      ruby:
        nsr = @search_request.dup
        nsr.delete_aggregation(aggregation.name, aggregation.value)
        badge_icon  = aggregation.exclude ? "far fa-minus-square" : "far fa-plus-square"
        badge_class = aggregation.exclude ? "bg-danger" : "bg-primary"

      .badge.mb-1.me-2.text-wrap.text-start.d-inline-flex(class=badge_class)
        div.me-1
          i(class=badge_icon)
        div.flex-grow-1
          span.text-uppercase.fw-bold.me-2
            = aggregation_label(aggregation)
          span.fw-normal
            = aggregation_value(aggregation, aggregation.value)
        div.ms-2
          = link_to new_search_request_path(nsr) do
            i.fas.fa-times.text-light


- content_for :aggregations do
  - search_result.aggregations.each do |aggregation|
    - begin
      = render "searches/aggregations/#{aggregation.class.name.demodulize.underscore}", search_request: search_request, aggregation: aggregation
    - rescue ActionView::MissingTemplate ; nil

.d-print-none
  - if content_for? :aggregations
    h5 = t(".aggregations_header")
    a.btn.btn-sm.btn-secondary.d-block.d-lg-none.mb-3(data-bs-toggle="collapse" href="#collapseAggregations")
      i.fas.fa-filter
      span.ms-1 = "Filter anzeigen"
    #collapseAggregations.collapse.d-lg-block
      = content_for :aggregations
