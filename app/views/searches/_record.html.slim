ruby:
  record_id = (record != :deleted) ? record.id : local_assigns.fetch(:deleted_record_id) {}
  enable_watch_lists_panel = local_assigns.fetch(:enable_watch_lists_panel) { false }
  enable_fulltext_links = local_assigns.fetch(:enable_fulltext_links) { false }
  search_scope = local_assigns.fetch(:search_scope) { current_search_scope }
  enable_notes = local_assigns.fetch(:enable_notes) { false }
  enable_image = local_assigns.fetch(:enable_image) { true }

.d-flex(
  data-record-scope=search_scope
  data-record-id=record_id
  data-notes-target="record"
)
  / Cover image
  - if enable_image
    .align-self-start.text-center.me-3.d-none.d-md-block(style="width: 55px; min-width: 55px; position: relative; color: var(--bs-border-color)")
      = image_tag(record_cover_images_path(search_scope: current_search_scope, record_id: record_id), class: "img-fluid")

  .flex-fill
    - if record == :deleted
      div
        = t(".notes.deleted-record", record_id: record_id)
    - else
      div.clearfix
        / Tools
        .float-end
          .d-flex.mb-2.d-print-none
            / Open Access
            - if record.is_open_access?
              = image_tag "oa-logo.svg", alt: "Open Access", style: "height: 1.8em;"

            / Note add button
            - if enable_notes
              .btn.btn-outline-primary.btn-sm.ms-2(
                data-record-id=record_id
                data-notes-button-add
                data-action="click->notes#edit"
              )
                i.fa-regular.fa-sticky-note.fa-fw(style="pointer-events: none;")

            / Watchlist
            - if enable_watch_lists_panel
              ruby:
                watch_lists_panel_component = WatchListsPanelComponent.new(
                  user: current_user,
                  search_scope: current_search_scope,
                  record_id: record_id
                )
              .ms-2 = render(watch_lists_panel_component)

            / Feedback button
            - if enable_feedback
              .ms-2.d-print-none
                div(data-controller="modal" data-modal-modal-dialog-outlet="#modal-dialog")
                  = link_to new_feedback_path(record_scope: search_scope, record_id: record_id), class: "btn btn-outline-primary btn-sm", "data-action": "click->modal#open" do
                    i.fa-solid.fa-message.fa-fw.pe-none

            / Citation / Export
            .ms-2
              .dropdown
                button.btn.btn-outline-primary.btn-sm.dropdown-toggle(type="button" data-bs-toggle="dropdown" aria-expanded="false")
                  i.fa-solid.fa-quote-left

                ul.dropdown-menu.dropdown-menu-end
                  .px-3.py-1.text-muted.text-sm = t(".citations.header")
                  li ==< link_to t(".citations.bibtex"), record_path(current_search_scope, record_id, format: :bib), class: "dropdown-item"

        / Title
        h5.mb-0.text-break
          = link_to record.title, show_record_path(record, search_request: @search_request, search_scope: search_scope)

      / Part of...
      = optional_value(record.is_part_of) do |is_part_of|
        ruby:
          links = is_part_of.map do |p|
            if p.id.present?
              sr_to_superorder = SearchEngine::SearchRequest.parse("sr[q,ids]=#{p.id}")
              sr_to_volumes    = SearchEngine::SearchRequest.parse("sr[q,superorder_id]=#{p.id}&sr[s,asc]=volume")

              link_to_superorder = link_to p.label, new_search_request_path(sr_to_superorder)
              link_to_volumes    = link_to t(".all_volumes"), new_search_request_path(sr_to_volumes)

              "#{link_to_superorder} (#{link_to_volumes})"
            else
              p.label
            end
          end
        span.me-2.fst-italic = links.join(", ").html_safe

      / Creators
      - if (creators = record.creators).present?
        .mb-1.mt-1 = render(CreatorsComponent.new(creators: creators))

      / Year of publication and edition
      - yop_and_edition = [record.edition, record.year_of_publication].map(&:presence).compact.join(", ")
      - if yop_and_edition.present?
        .mb-0 = yop_and_edition

      / Journal stock
      - if record.journal_stocks.present?
        ruby:
          journal_stocks = record.journal_stocks.map do |js|
            [js.label_prefix, js.label].join(" ")
          end
        .mb-0
          = t(".journal_stock")
          =< journal_stocks.join("; ")

      / Fulltext links
      - if enable_fulltext_links && record.is_online_resource?
        .card.mt-1.shadow-sm.rounded
          .card-header.px-2.py-1
            i.fa-solid.fa-cloud-arrow-down.fa-fw.me-2
            span.fw-bold = t(".fulltext_links")
          turbo-frame#fulltexts.w-100(src=record_fulltexts_path(current_search_scope, record.id) loading="lazy" target="_top")
            .p-2: i.fa-solid.fa-spinner.fa-spin-pulse

      / Call numbers
      - if record.call_numbers.present?
        div
          = t(".call_number")
          ==< record.call_numbers.map{|cn| link_to(cn, go_item_call_number_info_path)}.join(", ")

    / Notes
    - if enable_notes
      / Error
      .mt-2(data-notes-error)
        .alert.alert-danger
          = t(".notes.error")

      / Show
      .mt-2.border.rounded.shadow-sm(data-notes-output)
        .d-flex

          / Icon
          .p-2.text-muted.rounded-start(style="background-color: var(--bs-tertiary-bg)")
            i.fa-regular.fa-sticky-note.fa-fw(data-notes-btn-icon)

          / Note text
          .p-2.flex-grow-1.text-muted(data-notes-output-content)

          / Controls
          .dropdown
            .p-2.text-muted(data-bs-toggle="dropdown")
              i.fa-solid.fa-ellipsis-vertical.fa-fw(data-notes-btn-icon)
            ul.dropdown-menu.dropdown-menu-end
              li
                a.dropdown-item(
                  href=""
                  data-notes-button-edit
                  data-action="click->notes#edit"
                  data-record-id=record_id
                ) = t(".notes.edit")
              li
                a.dropdown-item(
                  href=""
                  data-notes-button-delete
                  data-action="click->notes#delete"
                  data-record-id=record_id
                ) = t(".notes.delete")

      / Edit
      .mt-2(data-notes-form)
        .d-flex.gap-2.flex-column.flex-md-row
          .flex-grow-1

            / Input
            input.form-control(
              type="text"
              data-notes-form-input
              data-action="keydown.esc->notes#cancel keydown.enter->notes#save"
              data-record-id=record_id
              placeholder=t(".notes.placeholder")
            )

          / Edit controls
          .d-flex.gap-1
            button.btn.btn-primary(
              type="button"
              data-action="click->notes#save"
              data-record-id=record_id
            ) = t(".notes.save")

            button.btn.btn-secondary(
              type="button"
              data-action="click->notes#cancel"
              data-record-id=record_id
            ) = t(".notes.cancel")
