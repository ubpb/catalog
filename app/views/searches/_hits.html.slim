ruby:
  paginator = render(PaginatorComponent.new(
    page: search_request.page.page,
    per_page: search_request.page.per_page,
    total: search_result.total,
    page_param: "sr[p]"
  ))

  sortables = SearchEngine[current_search_scope].adapter.sortables

  nsr = ->(name, direction) {
    sort = name ? SearchEngine::SearchRequest::Sort.new(name: name, direction: direction) : SearchEngine::SearchRequest::Sort.default
    search_request.dup.set_sort(sort)
  }

  omit_direction = ->(name) {
    sortables.find{|s| s["name"] == name}.try(:[], "omit_direction") == true
  }

.card.card-shadowed
  .card-header
    .d-flex.align-items-center
      div = paginator
      - if sortables.present?
        div.ms-auto
          .d-flex.align-items-center
            .me-2 = "Sortiert nach"
            .btn-group
              .btn-group
                button#sort-button.btn.btn-primary.dropdown-toggle(data-bs-toggle="dropdown")
                  - name = search_request.sort.name
                  = t("searches.sortables.#{current_search_scope}.#{name.underscore}", default: name)
                ul.dropdown-menu.dropdown-menu-end(aria-labelledby="sort-button")
                  li = link_to new_search_request_path(nsr.(nil, nil)), class: "dropdown-item" do
                    - default_name = SearchEngine::SearchRequest::Sort::DEFAULT_NAME
                    = t("searches.sortables.#{current_search_scope}.#{default_name.underscore}", default: default_name)
                  - sortables.each do |sortable|
                    li = link_to new_search_request_path(nsr.(sortable[:name], sortable[:default_direction])), class: "dropdown-item" do
                      = t("searches.sortables.#{current_search_scope}.#{sortable[:name].underscore}", default: sortable[:name])
              - unless search_request.sort.default? || omit_direction.(search_request.sort.name)
                - if search_request.sort.direction == "asc"
                  = link_to new_search_request_path(nsr.(search_request.sort.name, "desc")), class: "btn btn-secondary" do
                    i.fas.fa-arrow-up-short-wide.fa-lg
                - else
                  = link_to new_search_request_path(nsr.(search_request.sort.name, "asc")), class: "btn btn-secondary" do
                    i.fas.fa-arrow-down-wide-short.fa-lg

  .card-body
    #hits(
      data-controller="availabilities"
      data-availabilities-url-value=availabilities_path(mode: "badge")
    )
      .alert.alert-warning(
        data-availabilities-target="error"
        style="display: none"
      ) = t("searches.availabilities.error")

      - search_result.hits.each.with_index do |hit, index|
        ruby:
          check_availabilities = current_search_scope == :local && !hit.record.is_online_resource

        - if index > 0
          hr

        .hit(
          data-availabilities-target="record"
          data-record-id=hit.record.id
          data-availabilities-enabled=check_availabilities
        )
          = render "hit", hit: hit

          .mt-2(data-availabilities-output)
            i.fas.fa-sm.fa-spinner.fa-pulse
  .card-footer
    = paginator
