- if (vpn_info = render VpnInfoComponent.new(text_class: "text-danger", link_class: "link-danger")).present?
  .mb-3.bg-danger.bg-opacity-10.px-4.p-2.fst-italic.rounded
    = vpn_info

h4 = t(".header")
dl.key-value-list
  / Creators
  = optional_value(@record.creators) do |creators|
    dt = t(".creators")
    dd = render(CreatorsComponent.new(creators: creators, item_count: -1))

  / Title
  = optional_value(@record.title, default: "–") do |title|
    dt = t(".title")
    dd = title

  / Is part of...
  = optional_value(@record.is_part_of) do |is_part_of|
    dt = t(".is_part_of")
    dd
      ul.mb-0.list-unstyled
        - is_part_of.each do |p|
          - if p.id.present?
            ruby:
              sr_to_superorder = SearchEngine::SearchRequest.parse("sr[q,ids]=#{p.id}")
              sr_to_volumes    = SearchEngine::SearchRequest.parse("sr[q,superorder_id]=#{p.id}&sr[s,asc]=volume")

              link_to_superorder = link_to p.label, new_search_request_path(sr_to_superorder)
              link_to_volumes    = link_to t("searches.record.all_volumes"), new_search_request_path(sr_to_volumes)
            li
              == link_to_superorder
              ==< "(#{link_to_volumes})"
          - else
            li = p.label

  / Edition
  = optional_value(@record.edition) do |edition|
    dt = t(".edition")
    dd = edition

  / Place of publication & publisher
  = optional_value(@record.publication_notices) do |notices|
    dt = t(".publication_notices")
    dd = notices.join(", ")

  / Year of publication
  = optional_value(@record.year_of_publication) do |yop|
    dt = t(".year_of_publication")
    dd = yop

  / Superorder
  - if @record.is_superorder?
    dt = t(".volumes")
    dd
      turbo-frame#volumes(src=record_volumes_path(search_scope: current_search_scope, record_id: @record.id) target="_top")
        i.fa-solid.fa-spinner.fa-spin

  / Fulltext Links
  = optional_value(FulltextLinksFilter.filter(@record.fulltext_links)) do |links|
    dt = t(".fulltext_links")
    dd
      ul.list-group
        - links.each do |link|
          li.list-group-item
            .d-flex.align-items-center
              .ms-0
                div = link_to link.url do
                  i.fa-solid.fa-external-link.fa-fw
                  = link.label

                - if link.coverage
                  div.text-success: em = link.coverage

                - if link.note
                  div: em == link.note

  / Fulltext Links by resolver URL (used by CDI)
  / Only show for CDI scope and only if direct links via fulltext_links are not available.
  - if current_search_scope == :cdi && @record.resolver_link.present? && @record.fulltext_links.empty?
    dt = t(".fulltext_links")
    dd
      div
        turbo-frame#link-resolver-results(src=@record.resolver_link.url target="_top")
          i.fa-solid.fa-spinner.fa-spin-pulse

  / Link to print version via JOAP service
  - if @record.is_online_resource? && @record.is_journal? && (issn = @record.additional_identifiers.find{|i| i.type == :issn}&.value).present?
    dt = t(".print_version")
    dd
      turbo-frame#joap-results(src=joap_path(issn: issn) target="_top")
        i.fa-solid.fa-spinner.fa-spin-pulse

  / Links to related content (e.g. covers, table of contents)
  = optional_value(@record.related_resource_links) do |links|
    dt = t(".related_resource_links")
    dd
      ul.mb-0.list-unstyled
        - links.each do |link|
          li = link_to link.url, target: "_blank" do
            i.fa-solid.fa-external-link
            =< link.label || link.url

  / Related records (e.g. predesessors, parallel titels, etc.)
  = optional_value(@record.relations) do |relations|
    dt = t(".relations")
    dd
      turbo-frame#relations(src=record_relations_path(search_scope: current_search_scope, record_id: @record.id) target="_top")
        i.fa-solid.fa-spinner.fa-spin

  / Source
  = optional_value(@record.source) do |source|
    dt = t(".source")
    / TODO: Add link in case there is an ID present
    dd = strip_tags(source.label)

  / Notes
  = optional_value(@record.notes) do |notes|
    dt = t(".notes")
    dd
      ul.mb-0.ps-3
        - notes.each do |note|
          li = note

.row.row-cols-1.row-cols-xl-2
  .col
    dl.key-value-list
      / Language
      = optional_value(@record.languages, default: "–") do |languages|
        dt = t(".languages")
        dd
          - if languages.is_a?(String)
            = languages
          - else
            = languages.map{|l| t("searches.aggregations.default.language.values.#{l.downcase}", default: l.downcase) }.join("; ")

      / Identifiers
      dt = t(".identifiers.header")
      dd
        / ISBN
        = optional_value(@record.additional_identifiers.select{|i| i.type == :isbn}.map(&:value)) do |ids|
          div = "#{t(".identifiers.isbn")}: #{ids.join(", ")}"
        / ISSN
        = optional_value(@record.additional_identifiers.select{|i| i.type == :issn}.map(&:value)) do |ids|
          div = "#{t(".identifiers.issn")}: #{ids.join(", ")}"
        / eISSN
        = optional_value(@record.additional_identifiers.select{|i| i.type == :eissn}.map(&:value)) do |ids|
          div = "#{t(".identifiers.eissn")}: #{ids.join(", ")}"
        / DOI
        = optional_value(@record.additional_identifiers.select{|i| i.type == :doi}.map(&:value)) do |ids|
          div = "#{t(".identifiers.doi")}: #{ids.join(", ")}"
        / ZDB ID
        = optional_value(@record.zdb_id) do |id|
          div = "#{t(".identifiers.zdb")}: #{id}"
        / OCLC ID
        = optional_value(@record.additional_identifiers.select{|i| i.type == :ocolc}.map(&:value)) do |ids|
          div = "#{t(".identifiers.oclc")}: #{ids.join(", ")}"
        / Local System ID
        div = "#{t(".identifiers.id")}: #{@record.id}"

  .col
    dl.key-value-list.mb-0
      = optional_value(@record.physical_description, default: "–") do |physical_description|
        dt = t(".physical_description")
        dd = physical_description

      = optional_value(@record.local_notations) do |local_notations|
        ruby:
          linked_local_notations = local_notations.map do |local_notation|
            sr_to_local_notation = SearchEngine::SearchRequest.parse("sr[q,local_notation]=#{local_notation}")
            link_to local_notation.upcase, new_search_request_path(sr_to_local_notation)
          end
        dt = t(".local_notations")
        dd = linked_local_notations.join(", ").html_safe

      = optional_value(@record.subjects) do |subjects|
        ruby:
          linked_subjects = subjects.map do |subject|
            sr_to_subject = SearchEngine::SearchRequest.parse("sr[q,subject]=#{Addressable::URI.encode_component(subject, Addressable::URI::CharacterClasses::UNRESERVED)}")
            link_to subject, new_search_request_path(sr_to_subject)
          end
        dt = t(".subjects")
        dd = linked_subjects.join(", ").html_safe
